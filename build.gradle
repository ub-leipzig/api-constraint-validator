import java.lang.reflect.Array

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath("org.junit.platform:junit-platform-gradle-plugin:1.0.1")
    }
}

plugins {
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'com.github.hierynomus.license' version '0.13.1'
    id 'net.researchgate.release' version '2.6.0'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'org.sonarqube' version '2.5'
}

ext {
    moduleName = "de.ubleipzig.validator"
    vendor = 'UB Leipzig'
    license = 'Apache 2'

    trellisApiVersion = '0.3.0'
    trellisVocabularyVersion = '0.1.0'
    trellisJenaIoVersion = '0.2.0'
    jacksonVersion = '2.9.1'
    commonsRdfVersion = '0.3.0-incubating'
    slf4jVersion = '1.7.25'
    jenaVersion = '3.4.0'
    mustacheVersion = '0.9.5'
    jerseyVersion = '2.25.1'
    junitVersion = '4.12'
    mockitoVersion = '2.9.0'
    logbackVersion = '1.2.3'
    fcrepoClientVersion = "0.3.0"
    junitVersion = '4.12'
    mockitoVersion = '2.10.0'
    xercesVersion = '2.11.0'
    jacocoVersion = "0.7.9"
}

configurations {
    buildToolsConfig
}

dependencies {
    buildToolsConfig "cool.pandora:pandora-build-tools:0.1.3"
}

task processBuildTools(type: Copy) {
    from {
        configurations.buildToolsConfig.collect {
            zipTree(it).matching {
                include 'checkstyle/*.xml'
                include 'license/*.txt'
            }
        }
    }
    into 'build'
}

configure(allprojects) { project ->
    group 'de.ubleipzig'
    version '1.0-SNAPSHOT'

    apply plugin: 'maven'
    apply plugin: 'java'
    apply plugin: 'java-library'

    sourceCompatibility = 1.9
    targetCompatibility = 1.9

    repositories {
        mavenCentral()
        flatDir {
            dirs "$rootProject.projectDir/lib"
        }
    }

    check.dependsOn processBuildTools
}

subprojects {
    apply plugin: 'checkstyle'
    apply plugin: 'com.github.hierynomus.license'
    apply plugin: 'jacoco'

    afterEvaluate {
        repositories {
            jcenter()
        }

        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.compilerArgs.add("-Xlint:unchecked")
                options.compilerArgs.add("-Xlint:deprecation")
                options.compilerArgs.addAll(["--add-modules", "jdk.incubator.httpclient"])
            }
        }

        compileTestJava {
            doFirst {
                options.compilerArgs = [
                        '--add-modules', 'jdk.incubator.httpclient',
                        '-Xlint:deprecation'
                ]
            }
        }
    }

    checkstyle {
        configFile = rootProject.file('build/checkstyle/checkstyle.xml')
        configProperties.checkstyleConfigDir = rootProject.file('build/checkstyle/')
        toolVersion = "8.1"
    }

    jacoco {
        toolVersion = "0.7.9"
    }

    license {
        include "**/*.java"
        header rootProject.file('build/license/HEADER.txt')
        strictCheck true
        mapping {
            java = 'SLASHSTAR_STYLE'
        }
    }
}

project("validator") {
    apply plugin: 'org.junit.platform.gradle.plugin'

    configurations {
        antdeps
        junitXmlToHtml
    }

    dependencies {
        api project(":vocabulary")
        testImplementation project(":vocabulary")
        api group: 'org.apache.commons', name: 'commons-rdf-api', version: commonsRdfVersion
        api group: 'org.trellisldp', name: 'trellis-api', version: trellisApiVersion
        api group: 'org.apache.jena', name: 'jena-osgi', version: jenaVersion
        api group: 'org.trellisldp', name: 'trellis-io-jena', version: trellisJenaIoVersion
        testImplementation group: 'org.trellisldp', name: 'trellis-io-jena', version: trellisJenaIoVersion
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.0.1'
        testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.0.1'
        testImplementation group: 'org.apache.commons', name: 'commons-rdf-jena', version: commonsRdfVersion
        testImplementation group: 'org.apache.jena', name: 'jena-osgi', version: jenaVersion
        testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
        testImplementation group: 'xerces', name: 'xercesImpl', version: xercesVersion
        testRuntimeClasspath group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
        antdeps group: 'net.sf.saxon', name: 'saxon', version: '9.1.0.2'
        junitXmlToHtml 'org.apache.ant:ant-junit:1.9.7'
    }

    def tag = new String(System.properties['test.tag'].toString()) ?: new Array('must', 'may', 'should');
    def testResource = new String(System.properties['test.resource'].toString())

    junitPlatform {
        filters {
        }
    }

    junitPlatformTest {
        systemProperty "test.resource", testResource
    }

    task report {
        doLast {
            def reportsDir = new File(rootProject.buildDir, 'test-reports')
            def summaryDir = new File(rootDir, 'summary-reports')
            def date = new Date();
            def formattedDate = date.format('ddMMyy_HHmm')
            def summaryFileName = "test-summary_" + formattedDate + ".html"
            reportsDir.mkdirs()

            ant.taskdef(
                    name: 'junitReport',
                    classname: 'org.apache.tools.ant.taskdefs.optional.junit.XMLResultAggregator',
                    classpath: configurations.junitXmlToHtml.asPath
            )

            ant.junitReport(todir: "$buildDir/test-results/junit-platform", tofile: "aggregated-test-results.xml") {
                fileset(dir: "$buildDir/test-results/junit-platform")
                report(format: 'frames', todir: reportsDir)
            }

            ant.xslt(in: "${buildDir}/test-results/junit-platform/aggregated-test-results.xml",
                    style: "${project(':validator').projectDir}/src/test/resources/report-aggregator.xsl",
                    out: "${summaryDir}/${summaryFileName}",
                    classpath: configurations.antdeps.asPath)
        }
    }
}

project("vocabulary") {
    dependencies {
        api group: 'org.apache.commons', name: 'commons-rdf-api', version: commonsRdfVersion
        api group: 'org.trellisldp', name: 'trellis-api', version: trellisApiVersion
        api group: 'org.apache.jena', name: 'jena-osgi', version: jenaVersion
        testImplementation group: 'junit', name: 'junit', version: junitVersion
        testImplementation group: 'org.apache.commons', name: 'commons-rdf-jena', version: commonsRdfVersion
        testImplementation group: 'org.apache.jena', name: 'jena-osgi', version: jenaVersion
        testImplementation group: 'org.mockito', name: 'mockito-core', version: mockitoVersion
        testImplementation group: 'xerces', name: 'xercesImpl', version: xercesVersion

        testRuntimeClasspath group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    }
}



